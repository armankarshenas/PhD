%% Sequence-expression data processing 
% This script reads in CSV file from Rob Philips' group at Caltech and
% reshapes sequences to images and exports them into a new directory along
% with the corresponding expression level
 
%% Specifications 
Path_to_data = "~/Arman/BerkeleyPhD/Yr2/Reg-seq/RawData";
Path_to_save = "~/Arman/BerkeleyPhD/Yr2/Reg-seq/Data/LB_dataset";
% bit assignment will be done based on A:1, C:2, G:3, T:4
train_f = 0.7;
test_f = 0.15;
% training and test fraction of the data 


%% Main code body
cd(Path_to_data);
seq_file = dir(fullfile(pwd,"*.csv"));
sequences = readtable(seq_file(3).name);
fprintf("Showing a preview of the data ...\n");
head(sequences)
sequences.Properties.VariableNames{5} = 'sequence';
sequences.Properties.VariableNames{4} = 'ct_DNA';
sequences.Properties.VariableNames{2} = 'ct_RNA';
header = string(sequences.gene(:)) + "_"+cell2mat(sequences.barcode(1:height(sequences)));
sequences{:,width(sequences)+1} = header;
sequences.Properties.VariableNames{'Var8'} = 'Header';
sequences(any(ismissing(sequences),2),:) = [];
[tb_test,tb_valid,tb_train] = PartitionDataSet(train_f,test_f,sequences);

cd(Path_to_save)
% Training data
fastawrite("Train_sequences.fa",string(sequences.Header(1:train_idx)),string(sequences.sequence(1:train_idx,:)));
tb_train = table();
tb_train(:,1) = table(sequences.Header(1:train_idx));
tb_train(:,2) = table(sequences.ct_DNA(1:train_idx));
tb_train(:,3) = table(sequences.ct_RNA(1:train_idx));
tb_train(:,4) = table(sequences.gene(1:train_idx));
tb_train.Properties.VariableNames{'Var1'} = 'Header';
tb_train.Properties.VariableNames{'Var2'} = 'ct_DNA';
tb_train.Properties.VariableNames{'Var3'} = 'ct_RNA';
tb_train.Properties.VariableNames{'Var4'} = 'gene';
writetable(tb_train,"Train_activity.txt");
% Testing data 
fastawrite("Test_sequences.fa",string(sequences.Header(train_idx+1:train_idx+test_idx)),string(sequences.sequence(train_idx+1:train_idx+test_idx,:)));
tb_test = table();
tb_test(:,1) = table(sequences.Header(train_idx+1:train_idx+test_idx));
tb_test(:,2) = table(sequences.ct_DNA(train_idx+1:train_idx+test_idx));
tb_test(:,3) = table(sequences.ct_RNA(train_idx+1:train_idx+test_idx));
tb_test(:,4) = table(sequences.gene(train_idx+1:train_idx+test_idx));
tb_test.Properties.VariableNames{'Var1'} = 'Header';
tb_test.Properties.VariableNames{'Var2'} = 'ct_DNA';
tb_test.Properties.VariableNames{'Var3'} = 'ct_RNA';
tb_test.Properties.VariableNames{'Var4'} = 'gene';
writetable(tb_test,"Test_activity.txt");
% Validation data
fastawrite("Valid_sequences.fa",string(sequences.Header(train_idx+test_idx+1:end)),string(sequences.sequence(train_idx+test_idx+1:end,:)));
tb_val = table();
tb_val(:,1) = table(sequences.Header(train_idx+test_idx+1:end));
tb_val(:,2) = table(sequences.ct_DNA(train_idx+test_idx+1:end));
tb_val(:,3) = table(sequences.ct_RNA(train_idx+test_idx+1:end));
tb_val(:,4) = table(sequences.gene(train_idx+test_idx+1:end));
tb_val.Properties.VariableNames{'Var1'} = 'Header';
tb_val.Properties.VariableNames{'Var2'} = 'ct_DNA';
tb_val.Properties.VariableNames{'Var3'} = 'ct_RNA';
tb_val.Properties.VariableNames{'Var4'} = 'gene';
writetable(tb_val,"Valid_activity.txt");


